# Automatically generated by nengo-bones, do not edit this file directly
# Version: 0.1.0.dev0

language: minimal
notifications:
  email:
    on_success: change
    on_failure: change
cache:
  directories:
  - $HOME/miniconda

dist: trusty

env:
  global:
    - SCRIPT="test"
    - PYTHON_VERSION="3.6"
    - PIP_UPGRADE="true"  # always upgrade to latest version
    - PIP_UPGRADE_STRATEGY="eager"  # upgrade all dependencies
    - TEST_ARGS=""
    - COVERAGE="False"
    - NUMPY_VERSION="numpy"
    - TF_VERSION="tensorflow"
    - NENGO_VERSION="nengo"

jobs:
  include:
  -
    env:
      SCRIPT="static"
  -
    env:
      SCRIPT="docs"
  -
    cache: False
  -
    env:
      NENGO_VERSION="git+https://github.com/nengo/nengo.git"
      TF_VERSION="tensorflow<2.0 --pre"
      COVERAGE="True"
  -
    env:
      NENGO_VERSION="nengo==2.7.0"
      TF_VERSION="tensorflow==1.4.0"
      PIP_UPGRADE_STRATEGY="only-if-needed"
      COVERAGE="True"
  -
    env:
      TEST_ARGS="--dtype float64 --simulator-only"
  -
    env:
      TEST_ARGS="--unroll-simulation 5 --simulator-only"
  -
    env:
      TEST_ARGS="--inference-only --simulator-only"
  -
    env:
      SCRIPT="examples"
    language: generic
  - stage: deploy
    if: branch =~ ^release-candidate-* OR tag =~ ^v[0-9]*
    env: SCRIPT="deploy"
    cache: false
    deploy:
      - provider: pypi
        server: https://test.pypi.org/legacy/
        user: drasmuss
        password: $PYPI_TOKEN
        distributions: "sdist "
        on:
          all_branches: true
          condition: $TRAVIS_BRANCH =~ ^release-candidate-*
          condition: $TRAVIS_TAG = ""
      - provider: pypi
        user: drasmuss
        password: $PYPI_TOKEN
        distributions: "sdist "
        on:
          all_branches: true
          condition: $TRAVIS_TAG =~ ^v[0-9]*

# set up miniconda
before_install:
  - export PATH="$HOME/miniconda/bin:$PATH"
  - if ! [[ -d $HOME/miniconda/envs/test ]]; then
      rm -rf $HOME/miniconda;
      wget -q http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      conda create -q -y -n test python=$PYTHON_VERSION pip;
    fi
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - pip install git+https://github.com/nengo/nengo-bones.git@template-ci
  - check-bones
  - generate-bones --output-dir .ci ci-scripts
  - chmod +x .ci/*.sh

# install python requirements
install:
  - source activate test
  - pip install pip
  - .ci/$SCRIPT.sh install
  - conda list -e
  - pip freeze

after_install:
  - .ci/$SCRIPT.sh after_install

before_script:
  - .ci/$SCRIPT.sh before_script

script:
  - .ci/$SCRIPT.sh script

before_cache:
  - .ci/$SCRIPT.sh before_cache

after_success:
  - .ci/$SCRIPT.sh after_success

after_failure:
  - .ci/$SCRIPT.sh after_failure

before_deploy:
  - .ci/$SCRIPT.sh before_deploy

after_deploy:
  - .ci/$SCRIPT.sh after_deploy

after_script:
  - .ci/$SCRIPT.sh after_script
